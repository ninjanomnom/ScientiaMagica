<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="ParsedScene.ttinclude" #><#@ import namespace="System.Text" #>
using Godot;

namespace <#
    // Get the base directory of the godot project and the namespace for this file
    var directoriesToSkipNamespace = new string[] {
        "src"
    };
    var namespaceBuild = new List<string> { };
    void AddToNamespace(string segment) {
        if (directoriesToSkipNamespace.Contains(segment)) {
            return;
        }
        
        namespaceBuild.Add(segment);
    }

    var ourLocation = System.IO.Path.GetFullPath(Host.ResolvePath("Assets\\.."));
    while (!System.IO.Directory.GetFiles(ourLocation, "*.godot").Any()) {
        AddToNamespace(Path.GetFileName(ourLocation));
        ourLocation = System.IO.Path.GetDirectoryName(ourLocation);
        if (ourLocation == null) {
            throw new InvalidOperationException("Asset T4 builder is not in the directory of a godot project");
        }
    }

    namespaceBuild.Reverse();
    
    Write(string.Join(".", namespaceBuild));
    #> {
<#
    var baseLocation = new Uri(ourLocation);

    foreach (var file in System.IO.Directory.EnumerateFiles(ourLocation, "*.tscn", SearchOption.AllDirectories)) {
        var scene = new ParsedScene(File.ReadAllText(file));
        scene.Process();
        
        var relative = baseLocation.MakeRelativeUri(new Uri(file)).OriginalString;
        relative = Regex.Replace(relative, @"^.+?[\\/]", @"res://");
        
        var name = System.IO.Path.GetFileNameWithoutExtension(file);
    }
#>
}